using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace DataAvail.SqlConverter.XmlFormatter
{
    public static class DbExtensions
    {
        public static XmlFormatterOptions Options = new XmlFormatterOptions();

        public static XElement GetXOPElement(this IDb Db, string RootName)
        {
            return new XElement(RootName,
                    Options.tableOptions != null  ? GetChildren(Options.tableOptions.collectionTag, Db.Tables.Where(p => !p.IsSysTable).Select(p => p.GetXOPElement())) : null,
                    Options.relationOptions != null ? GetChildren(Options.relationOptions.collectionTag, Db.Tables.SelectMany(p => p.FkRelations).Select(p => p.GetXOPElement())) : null);
        }

        public static XElement GetXOPElement(this ITable Table)
        {
            return new XElement(Options.tableOptions.tagName,
                    Table.GetAttribute(Options.tableOptions.nameAttr, Table.Name, Options.tableOptions.attrCreator),
                    Table.GetCustomAttributes(Options.tableOptions.attrCreator),
                    Options.fieldOptions != null ? GetChildren(Options.fieldOptions.collectionTag, Table.Columns.Select(p => p.GetXOPElement())) : null);
        }

        public static XElement GetXOPElement(this IColumn Column)
        {
            return new XElement(Options.fieldOptions.tagName,
                    Column.GetAttribute(Options.fieldOptions.nameAttr, Column.Name, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.typeAttr, Column.DbType, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.sizeAttr, Column.Size, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.defaultValueAttr, Column.DefaultValue, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.isNullableAttr, Column.IsNullable, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.isPkAttr, Column.IsPk, Options.fieldOptions.attrCreator),
                    Column.GetAttribute(Options.fieldOptions.isPkAutoGeneratedAttr, Column.IsPkAutoGenerated, Options.fieldOptions.attrCreator),
                    Column.GetCustomAttributes(Options.fieldOptions.attrCreator));
        }

        public static XElement GetXOPElement(this IRelation Relation)
        {
            return new XElement(Options.relationOptions.tagName,
                   Relation.GetAttribute(Options.relationOptions.nameAttr,
                       string.Format("{0}_{1}_{2}_{3}", Relation.ChildTable, Relation.ChildColumn, Relation.ParentTable, Relation.ParentColumn), 
                       Options.relationOptions.attrCreator),
                   Relation.GetAttribute(Options.relationOptions.childFieldAttr, Relation.ChildColumn, Options.relationOptions.attrCreator),
                   Relation.GetAttribute(Options.relationOptions.childTableAttr, Relation.ChildTable, Options.relationOptions.attrCreator),
                   Relation.GetAttribute(Options.relationOptions.parentFieldAttr, Relation.ParentColumn, Options.relationOptions.attrCreator),
                   Relation.GetAttribute(Options.relationOptions.parentTableAttr, Relation.ParentTable, Options.relationOptions.attrCreator),
                   Relation.GetCustomAttributes(Options.relationOptions.attrCreator));
        }

        private static XAttribute GetAttribute<T>(this T DbObject, string AttrName, object AttrValue, IAttributeCreator<T> AttributeCreator)
        {
            string attrVal = null;

            if (!string.IsNullOrEmpty(AttrName))
            {
                if (AttributeCreator != null)
                {
                    attrVal = AttributeCreator.GetAttributeValue(DbObject, AttrName);

                    if (attrVal == "")
                        AttrValue = null;
                    else if (attrVal != null)
                        AttrValue = attrVal;
                }

                return AttrValue != null ? new XAttribute(AttrName, AttrValue) : null;
            }
            else
            {
                return null;
            }
            
        }

        private static IEnumerable<XAttribute> GetCustomAttributes<T>(this T DbObject, IAttributeCreator<T> AttributeCreator)
        {
            if (AttributeCreator != null)
            {
                IDictionary<string, string> attrs = AttributeCreator.GetCustomAttributes(DbObject);

                if (attrs != null)
                { 
                    return attrs.Select(p=>new XAttribute(p.Key, p.Value));
                }
            }

            return new XAttribute[] { };
        }

        private static IEnumerable<XElement> GetChildren(string AttrName, IEnumerable<XElement> Elements)
        {
            return !string.IsNullOrEmpty(AttrName) ? new XElement[] { new XElement(AttrName, Elements) } : Elements;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace DataAvail.SqlConverter.XmlFormatter
{
    public class XmlFormatterOptions
    {
        public TableOptions tableOptions = new TableOptions();

        public FieldOptions fieldOptions = new FieldOptions();

        public RelationOptions relationOptions = new RelationOptions();

        public class TableOptions
        {
            public string tagName = "Table";

            public string schemeAttr = "schemeName";

            public string nameAttr = "name";

            public string collectionTag = "Tables";

            public IAttributeCreator<ITable> attrCreator = null;
        }

        public class FieldOptions
        {
            public string tagName = "Field";

            public string nameAttr = "name";

            public string typeAttr = "type";

            public string sizeAttr = "size";

            public string isNullableAttr = "nullable";

            public string defaultValueAttr = "defaultValue";

            public string isPkAttr = "pk";

            public string isPkAutoGeneratedAttr = "isPkAutoGenerated";

            public string collectionTag = "Fields";

            public IAttributeCreator<IColumn> attrCreator = null;
        }

        public class RelationOptions
        {
            public string tagName = "Relation";

            public string nameAttr = "name";

            public string collectionTag = "Relations";

            public string childFieldAttr = "childField";

            public string childTableAttr = "childTable";

            public string parentFieldAttr = "parentField";

            public string parentTableAttr = "parentTable";

            public IAttributeCreator<IRelation> attrCreator = null;
        }
    }

    public interface IAttributeCreator<T>
    {
        /// <summary>
        /// Get value of an attribute
        /// </summary>
        /// <param name="DbObject">One of the db objects (ITable, IColumn, IRelation)</param>
        /// <param name="AttrName">Name of the attribute</param>
        /// <returns>If returns empty string, attribute won't be created, if null attribute should be created as is</returns>
        string GetAttributeValue(T DbObject, string AttrName);

        /// <summary>
        /// Returns custom attributes of object, in format of key/value pair.
        /// </summary>
        IDictionary<string, string> GetCustomAttributes(T DbObject);
    }


}

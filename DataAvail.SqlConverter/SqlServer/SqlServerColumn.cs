using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;

namespace DataAvail.SqlConverter.SqlServer
{
    public class SqlServerColumn : Column
    {
        public SqlServerColumn(ITable Table, IDataReader DataReader)
            : base(Table, DataReader)
        { }

        protected override string ReaderNameField
        {
            get { return "COLUMN_NAME"; }
        }

        protected override string ReaderTypeField
        {
            get { return "DATA_TYPE"; }
        }

        protected override string ReaderSizeField
        {
            get { return "CSIZE"; }
        }

        protected override string ReaderDefaultValueField
        {
            get { return "COLUMN_DEFAULT"; }
        }

        protected override string ReaderIsNullableField
        {
            get { return "IS_NULLABLE"; }
        }

        protected override string ReaderIsPkField
        {
            get { return "IS_PK"; }
        }

        protected override string ReaderIsPkAutoGeneratedField
        {
            get { return "IDENT"; }
        }

        protected override DbType ParseDbType(string TypeStr)
        {
            //Conversion was taken from here: http://www.carlprothman.net/Default.aspx?tabid=97
            if (TypeStr == "timestamp")
                return DbType.Binary;
            else if (TypeStr == "datetime" || TypeStr == "smalldatetime")
                return DbType.DateTime;
            else if (TypeStr == "decimal" || TypeStr == "numeric")
                return DbType.Decimal;
            else if (TypeStr == "money" || TypeStr == "smallmoney")
                return DbType.Currency;
            else if (TypeStr == "binary" || TypeStr == "varbinary" || TypeStr == "image")
                return DbType.Binary;
            else if (TypeStr == "tinyint")
                return DbType.Int16;
            else if (TypeStr == "bigint")
                return DbType.Int32;
            else if (TypeStr == "sql_variant")
                return DbType.Object;
            else if (TypeStr == "xml")
                return DbType.Xml;
            else if (TypeStr == "uniqueidentifier")
                return DbType.Guid;
            else if (TypeStr == "ntext")
                return DbType.String;
            else if (TypeStr == "nchar" || TypeStr == "nvarchar")
                return DbType.String;
            else if (TypeStr == "int")
                return DbType.Int32;
            else if (TypeStr == "bigint")
                return DbType.Int64;

            throw new ArgumentException(string.Format("Can't parse type {0}", TypeStr));
        }

        protected override bool ParseIsNullable(object IsNullableVal)
        {
            return (string)IsNullableVal == "YES";
        }

        protected override bool ParseIsPk(object IsPkVal)
        {
            return (int)IsPkVal == 1;
        }

        protected override bool ParseIsIdent(object IsPkVal)
        {
            return (int)IsPkVal == 1;
        }

        protected override string ParseDefaultValue(string Val)
        {
            return Val.Trim('(',')');
        }


    }
}

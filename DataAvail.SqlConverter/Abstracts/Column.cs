using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Reflection;

namespace DataAvail.SqlConverter
{
    public abstract class Column : IColumn
    {
        public Column(ITable Table, IDataReader DataReader)
        {
            _table = Table;

            object val = System.DBNull.Value;

            _name = (string)DataReader[ReaderNameField];

            _dbType = this.ParseDbType((string)DataReader[ReaderTypeField]);

            val = DataReader[ReaderSizeField];

            if (val != System.DBNull.Value)
                _size = (int)val;

            val = DataReader[ReaderDefaultValueField];

            if (val != System.DBNull.Value)
                _defaultValue = ParseDefaultValue((string)val);

            val = DataReader[ReaderIsNullableField];

            if (val != System.DBNull.Value)
                _isNullable = ParseIsNullable(val);

            val = DataReader[ReaderIsPkField];

            if (val != System.DBNull.Value)
                _isPk = ParseIsPk(val);

            val = DataReader[ReaderIsPkAutoGeneratedField];

            if (val != System.DBNull.Value)
                _isPkAutoGenerated = ParseIsIdent(val);
        }

        private readonly ITable _table;

        private readonly string _name;

        private readonly DbType _dbType;

        private readonly int _size = 1;

        private readonly string _defaultValue;

        private readonly bool _isNullable = false;

        private readonly bool _isPk = false;

        private readonly bool _isPkAutoGenerated = false;

        #region IColumn Members

        public string Name
        {
            get { return _name; }
        }

        public System.Data.DbType DbType
        {
            get { return _dbType; }
        }

        public int Size
        {
            get { return _size; }
        }

        public string DefaultValue
        {
            get { return _defaultValue; }
        }

        public bool IsNullable
        {
            get { return _isNullable; }
        }

        public bool IsPk
        {
            get { return _isPk; }
        }

        public bool IsPkAutoGenerated
        {
            get { return _isPkAutoGenerated; }
        }

        public ITable Table
        {
            get { return _table; }
        }

        #endregion

        #region Abstaracts

        protected abstract string ReaderNameField { get; }

        protected abstract string ReaderTypeField { get; }

        protected abstract string ReaderSizeField { get; }

        protected abstract string ReaderDefaultValueField { get; }

        protected abstract string ReaderIsNullableField { get; }

        protected abstract string ReaderIsPkField { get; }

        protected abstract string ReaderIsPkAutoGeneratedField { get; }

        protected abstract DbType ParseDbType(string TypeStr);

        protected abstract bool ParseIsNullable(object IsNullableVal);

        protected abstract bool ParseIsPk(object IsPkVal);

        protected abstract bool ParseIsIdent(object IsPkVal);

        protected abstract string ParseDefaultValue(string Val);

        #endregion

    }
}

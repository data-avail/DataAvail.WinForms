using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DataAvail.Linq;
using DataAvail.XObject;

namespace DataAvail.AppShell
{
    internal class DataAdapter : DataAvail.Data.DataAdapter.DataAdapterAsync//DataAvail.DevArt.Data.DataAdapter
    {
        internal DataAdapter(
                XOTableContext AppItemContext)
            : base(DataAvail.Data.DbContext.DbContext.CurrentContext.ObjectCreator.Connection,
            AppItemContext.IsUseDefInsertCommand ? DataAvail.Data.DbContext.DbContext.CurrentContext.ObjectCreator.CreateCommand() : null,
            AppItemContext.IsUseDefUpdateCommand ? DataAvail.Data.DbContext.DbContext.CurrentContext.ObjectCreator.CreateCommand() : null,
            AppItemContext.IsUseDefDeleteCommand ? DataAvail.Data.DbContext.DbContext.CurrentContext.ObjectCreator.CreateCommand() : null)
        {
            /*
            _xtraObjectProperties = XtraObjectProperties;

            _isPKAutoGenerated = false;//nimpl

            if (InsertFun != null)
            {
                if (!XtraObjectProperties.IsUseDefInsertCommand)
                {
                    InsertFun.Initialize(
                        this.DbContextObjectCreator.Connection,
                        this.GetInsertCommandText(),
                        System.Data.CommandType.Text,
                        this.GetInsertFunctionParameters(),
                        new DataAvail.XOP.XOFieldMappingRules(null, InsertFun.ParamCreator));

                    if (_isPKAutoGenerated)
                        InsertFun.commandExecuted += new DataAvail.Data.Function.CommandExecutedHandler(InsertFun_commandExecuted);

                    _selectLastInsertedPkCommand = this.DbContextObjectCreator.CreateCommand();
                    _selectLastInsertedPkCommand.Initialize(this.DbContextObjectCreator.Connection,
                        DataAvail.Data.DbContext.DbContext.CurrentContext.GetIdentityCommandText(XtraObjectProperties.ObjectSourceUpdate), System.Data.CommandType.Text);
                }
                else
                {
                    InsertFun.Initialize(
                       this.DbContextObjectCreator.Connection,
                       XtraObjectProperties.Functions.createFunction.funcName,
                       System.Data.CommandType.StoredProcedure,
                       XtraObjectProperties.Functions.createFunction.funcParams,
                       new DataAvail.XtraObjectProperties.XOFFunctionParamMappingRules(null, InsertFun.ParamCreator));
                }
            }

            if (this.UpdateFun != null)
            {
                if (DataAvail.Utils.EnumFlags.IsContain(XtraObjectProperties.UseCommands, DataAvail.Utils.EditModeType.Edit))
                {
                    UpdateFun.Initialize(
                        this.DbContextObjectCreator.Connection,
                        this.GetUpdateCommandText(),
                        System.Data.CommandType.Text,
                        this.GetUpdateFunctionParameters(),
                        new DataAvail.XOP.XOFieldMappingRules(null, UpdateFun.ParamCreator));
                }
                else
                {
                    UpdateFun.Initialize(
                 this.DbContextObjectCreator.Connection,
                 XtraObjectProperties.Functions.updateFunction.funcName,
                 System.Data.CommandType.StoredProcedure,
                 XtraObjectProperties.Functions.updateFunction.funcParams,
                 new DataAvail.XtraObjectProperties.XOFFunctionParamMappingRules(null, UpdateFun.ParamCreator));
                }
            }

            if (this.DeleteFun != null)
            {
                if (DataAvail.Utils.EnumFlags.IsContain(XtraObjectProperties.UseCommands, DataAvail.Utils.EditModeType.Delete))
                {
                    DeleteFun.Initialize(
                        this.DbContextObjectCreator.Connection,
                        this.GetDeleteCommandText(),
                        System.Data.CommandType.Text,
                        this.GetDeleteFunctionParameters(),
                        new DataAvail.XOP.XOFieldMappingRules(null, DeleteFun.ParamCreator));
                }
                else
                {
                    DeleteFun.Initialize(
                  this.DbContextObjectCreator.Connection,
                  XtraObjectProperties.Functions.deleteFunction.funcName,
                  System.Data.CommandType.StoredProcedure,
                  XtraObjectProperties.Functions.deleteFunction.funcParams,
                  new DataAvail.XtraObjectProperties.XOFFunctionParamMappingRules(null, DeleteFun.ParamCreator));
                }
            }
             */
        }

        /*
        private XOTableContext _xtraObjectProperties;

        DataAvail.Data.Function.Function _selectLastInsertedPkCommand;

        internal static DataAvail.Data.DataAdapter.IDataAdapter GetDataAdapter(XOTableContext XtraObjectProperties)
        {
            return new DataAdapter(XtraObjectProperties);
        }

        //Is auto generetade primary key
        private readonly bool _isPKAutoGenerated = false;

        private DataAvail.Data.DbContext.IDbContextObjectCreator DbContextObjectCreator
        {
            get { return DataAvail.Data.DbContext.DbContext.CurrentContext.ObjectCreator; }
        }

        public XOTableContext XtraObjectProperties
        {
            get { return _xtraObjectProperties; }
        }

        protected override bool IsPrimaryKeyAutoGenerated
        {
            get
            {
                return _isPKAutoGenerated;
            }
        }


        private string GetInsertCommandText()
        {
            return string.Format("INSERT INTO {0} ({1}) VALUES ({2})",
                XtraObjectProperties.ObjectSourceUpdate,
                GetInsertFunctionParameters().Select(p => p.Name.ToUpper()).ToString(","),
                GetInsertFunctionParameters().Select(p => DataAvail.Data.DbContext.DbContext.CurrentContext.ParameterValuePrefix + p.Name.ToUpper()).ToString(","));
        }

        private string GetUpdateCommandText()
        {
            var updateCommandTextParams = GetUpdateFunctionParameters();

            if (!DataAvail.Data.DbContext.DbContext.CurrentContext.IsPkIncludedIntoUpdate)
                updateCommandTextParams = updateCommandTextParams.Where(p => !p.IsPK);

            return string.Format("UPDATE {0} SET {1} WHERE {2} = {3}",
                XtraObjectProperties.ObjectSourceUpdate,
                updateCommandTextParams.Select(p => DataAvail.Data.DbContext.DbContext.CurrentContext.ParameterValuePrefix + p.Name.ToUpper())
                .ToString(updateCommandTextParams.Select(p => p.Name.ToUpper()), null, "=", ","),
                GetUpdateFunctionParameters().Where(p => p.IsPK).Select(p => p.FieldName.ToUpper()).First(),
                GetUpdateFunctionParameters().Where(p => p.IsPK).Select(p => DataAvail.Data.DbContext.DbContext.CurrentContext.ParameterValuePrefix + p.FieldName.ToUpper()).First());
        }

        private string GetDeleteCommandText()
        {
            return string.Format("DELETE FROM {0} WHERE {1} = {2}",
                XtraObjectProperties.ObjectSourceUpdate,
                GetDeleteFunctionParameters().Select(p => p.Name.ToUpper()).ToString(","),
                GetDeleteFunctionParameters().Select(p => DataAvail.Data.DbContext.DbContext.CurrentContext.ParameterValuePrefix + p.Name.ToUpper()).ToString(","));
        }

        private IEnumerable<XOField> GetInsertFunctionParameters()
        {
            return XtraObjectProperties.Fields.Where(p => (p.IsMapped && (!p.IsPK || !_isPKAutoGenerated)));
        }

        private IEnumerable<XOField> GetUpdateFunctionParameters()
        {
            return XtraObjectProperties.Fields.Where(p => p.IsMapped);
        }

        private IEnumerable<XOField> GetDeleteFunctionParameters()
        {
            return XtraObjectProperties.Fields.Where(p => p.IsPK);
        }

        void InsertFun_commandExecuted(object sender, DataAvail.Data.Function.CommandExecutedEventArgs args)
        {
            object retVal = _selectLastInsertedPkCommand.Execute();

            args.executionResult = retVal;
        }
         */


        internal static DataAvail.Data.DataAdapter.IDataAdapter GetDataAdapter(XOTableContext XtraObjectProperties)
        {
            return null;
        }

    }
}

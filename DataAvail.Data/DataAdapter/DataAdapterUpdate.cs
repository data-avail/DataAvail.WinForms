using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataAvail.Data.DataAdapter
{
    public abstract class DataAdapterUpdate<T> : IDataAdapter
    {
        public DataAdapterUpdate(System.Data.IDbConnection DbConnection, Function.Function Insert, Function.Function Update, Function.Function Delete)
        {
            _insertFun = Insert;

            _updateFun = Update;

            _deleteFun = Delete;

            _dbConnection = DbConnection;

            _supportedOperations = DataAdapterSuppotedOperations.None;

            if (_insertFun != null)
                _supportedOperations = _supportedOperations | DataAdapterSuppotedOperations.Create;

            if (_updateFun != null)
                _supportedOperations = _supportedOperations | DataAdapterSuppotedOperations.Update;

            if (_deleteFun != null)
                _supportedOperations = _supportedOperations | DataAdapterSuppotedOperations.Delete;
        }

        private readonly System.Data.IDbConnection _dbConnection;

        private readonly Function.Function _insertFun;

        private readonly Function.Function _updateFun;

        private readonly Function.Function _deleteFun;

        private readonly Dictionary<object, T> _origKeys = new Dictionary<object, T>();

        private System.Data.IDbTransaction _dbTransaction;

        private DataAdapterSuppotedOperations _supportedOperations;

        protected System.Data.IDbConnection Connection
        {
            get
            {
                if (_dbConnection.State == System.Data.ConnectionState.Closed)
                    _dbConnection.Open();

                return _dbConnection;
            }
        }

        public Function.Function InsertFun
        {
            get { return _insertFun; }
        }

        public Function.Function UpdateFun
        {
            get { return _updateFun; }
        }

        public Function.Function DeleteFun
        {
            get { return _deleteFun; }
        } 


        #region IDataAdapter Members

        public virtual DataAdapterSuppotedOperations SupportedOperations
        {
            get 
            {
                return _supportedOperations;
            }
        }

        public abstract void Clear(object DataSource);

        public abstract void Fill(object DataSource, string Filter);

        public abstract void Fill(IEnumerable<object> Items);

        public void Update(object DataSource, IEnumerable<object> Objects)
        {
            foreach (T item in GetDeletedItems(Objects))
            {
                if (_deleteFun == null)
                    throw new NotSupportedException("Delete opertaion not supported");

                _deleteFun.SetParams(GetItemValues(item));

                _deleteFun.Execute();
            }

            foreach (T item in GetInsertedItems(Objects))
            {
                if (_insertFun == null)
                    throw new NotSupportedException("Insert opertaion not supported");

                _insertFun.SetParams(GetItemValues(item));

                if (IsPrimaryKeyAutoGenerated)
                    _insertFun.SetParam(GetPrimaryKeyName(item), System.DBNull.Value);

                object key = _insertFun.Execute();

                object origKey = GetPrimaryKey(item);

                if (IsPrimaryKeyAutoGenerated)
                    SetPrimaryKey(item, key);

                _origKeys.Add(origKey, item);
            }

            foreach (T item in GetModifyedItems(Objects))
            {
                if (_updateFun == null)
                    throw new NotSupportedException("Update opertaion not supported");

                _updateFun.SetParams(GetItemValues(item));

                _updateFun.Execute();
            }
        }

        public void BeginTransaction()
        {
            _dbTransaction = Connection.BeginTransaction();
        }

        public void CommitTransaction()
        {
            _origKeys.Clear();

            _dbTransaction.Commit();

            _dbTransaction = null;
        }

        public void RollbackTransaction()
        {
            foreach (KeyValuePair<object, T> kvp in _origKeys)
            {
                SetPrimaryKey(kvp.Value, kvp.Key);
            }

            _origKeys.Clear();

            _dbTransaction.Rollback();

            _dbTransaction = null;
        }

        #endregion

        protected abstract IEnumerable<T> GetDeletedItems(IEnumerable<object> Objects);

        protected abstract IEnumerable<T> GetInsertedItems(IEnumerable<object> Objects);

        protected abstract IEnumerable<T> GetModifyedItems(IEnumerable<object> Objects);

        protected abstract IDictionary<string, object> GetItemValues(T Item);

        protected abstract string GetPrimaryKeyName(T Item);

        protected abstract void SetPrimaryKey(T Item, object Value);

        protected abstract object GetPrimaryKey(T Item);

        protected abstract bool IsPrimaryKeyAutoGenerated { get; }

    }
}

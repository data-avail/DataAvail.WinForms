using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using DataAvail.Utils.XmlLinq;

/*
 *Тэг	Column
Аттрибуты	 name, type, pk, pkAutoGenerated, defaultValue, isMapped, mappedParamName , nullable, convert
Вложенные тэги	
Класс	XOPColumn
Описание	Описвает поле данных таблицы.

Аттрибуты
Имя 	Описание

 * name*	Имя поля таблицы (должен строго соответствовать именю поля в БД).

 * type*	Тип параметра.
Формат: тип[,размер]
Приеры: type=”int”  type=”string,50”

 * pk	Если true - поле ключ таблицы. (**false)

 * pkAutoGenerated	Если поле это ключ таблицы то опеределяет передавать ли его значение при создании новой записи, если true то значение передается в данном случае оно должно быть гарантированно уникальным для таблицы. (**true)

 * defaultValue	Значение параметра по умолчанию при создании новой записи.

 * isMapped	Определяет будет ли поле передано в комманду сохранения записи.

 * mappedParamName	Ассоциирует поле с параметром  функции (типа update)

 * isTypeConverted	Определяет нужно ли конвертировать тип поля (см typesConverter)

 * nullable	Определяет допустимы ли в поле null значения (**false для ключа, true для всех остальных)

Влияние аттрибутов на интерфейс пользователя. 
Имя 	Описание
name*	Заголовки контролов для этого поля будут равны этому значению
type*	Для каждого типа определенны свои контролы по умолчанию, которые будут создаваться для этого поля при запуске программы.
1.	Date - DateEdit
2.	Int, long – Если поле это Foregin Key то LookupEdit, в противном случает textEdit
3.	Все остальные – textEdit
pk*	Поле дизаблится для пользователя если pkAutoGenerated = true.
При создании новой записи поле автоматически инкрементиться.
defaultValue	Значение поля при создании новой записи будет равно этому значению.
isMapped*	Поле дизаблится для пользователя если параметр false.
nullable	Пользователь не сможет выстовить значение данного контрола в null если значение аттрибута false.
* Поведение и интерфейс полей можетбыть в дальнейшем изменен в соответствии с мета-данными определенными в файлах View и Security
 */

namespace DataAvail.XObject.XOP
{
    public class XOPField
    {
        public XOPField(XElement XElement)
        {
            XmlLinqElementReader reader = new XmlLinqElementReader(XElement, XOApplication.xmlReaderLog);

            _name = reader.ReadAttribute("name", true);

            _type = new XOPFieldType(XElement);

            _isPk = reader.ReadAttributeBool("pk", false);

            _isPkAutoGenertaed = reader.ReadAttributeBool("isPkAutoGenertaed", true);

            if (!_isPk && _isPkAutoGenertaed)
                XmlLinqReaderLog.WriteToLog(XOApplication.xmlReaderLog, string.Format("Field {0} is not primary key but isPKAutoGenerated is set to true, it will be ignored.", _name), false);

            _defaultValue = reader.ReadAttributeValue("defaultValue", _type.Type);

            _nullable = reader.ReadAttributeBool("nullable", true);

            _isMapped = reader.ReadAttributeBool("isMapped", true);

            _mappedParamName = reader.ReadAttribute("mappedParamName");

            if (!_isMapped && !string.IsNullOrEmpty(_mappedParamName))
                XmlLinqReaderLog.WriteToLog(XOApplication.xmlReaderLog, string.Format("Field {0} is not mapped but it contains mappedParamName, it will be ignored.", _name), false);

            _isMappedTypeConverted = reader.ReadAttributeBool("isMappedTypeConverted", false);

            _calculator = reader.ReadAttribute("calculator");
        }

        private readonly string _name;

        private readonly XOPFieldType _type;

        private readonly bool _isPk;

        private readonly bool _isPkAutoGenertaed;

        private readonly object _defaultValue;

        private bool _nullable;

        private readonly bool _isMapped;

        private readonly string _mappedParamName;

        private readonly bool _isMappedTypeConverted;

        private readonly string _calculator;

        public string Name
        {
            get { return _name; }
        }

        public XOPFieldType Type
        {
            get { return _type; }
        }

        public bool IsPk
        {
            get { return _isPk; }
        }

        public bool IsPkAutoGenerated
        {
            get { return _isPkAutoGenertaed; }
        }

        public object DefaultValue
        {
            get { return _defaultValue; }
        }

        public bool Nullable
        {
            get { return _nullable; }
        }

        public bool IsMapped
        {
            get { return _isMapped; }
        }

        public string MappedParamName
        {
            get { return _mappedParamName; }
        }

        public bool IsMappedTypeConverted
        {
            get { return _isMappedTypeConverted; }
        }

        public string Calculator
        {
            get { return _calculator; }
        } 

    }
}

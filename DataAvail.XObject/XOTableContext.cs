using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DataAvail.XObject.XContexts;
using DataAvail.XObject.XOP;
using DataAvail.XObject.XWP;
using DataAvail.XObject.XSP;
using DataAvail.Utils;


namespace DataAvail.XObject
{
    public class XOTableContext
    {
        public XOTableContext(XOTable XOTable, XContext XContext)
        {
            _xOTable = XOTable;

            _xContext = XContext;

            _fields = XOTable.Fields.Select(p => new XOFieldContext(this, p)).ToArray();
        }

        private readonly XOTable _xOTable;

        private readonly XContext _xContext;

        private XOTableContextActiveType _activeType = XOTableContextActiveType.None;

        private XOTableContextActiveType _origActiveType = XOTableContextActiveType.None;

        private readonly XOFieldContext[] _fields;

        public XOFieldContext[] Fields
        {
            get { return _fields; }
        }

        public XOTable XOTable
        {
            get { return _xOTable; }
        }

        #region Context related fields and methods

        public XContext Context
        {
            get { return _xContext; }
        }

        public XOTableContextActiveType ActiveType
        {
            get { return _activeType; }

            set 
            {
                _origActiveType = _activeType;
            
                _activeType = value; 
            }
        }

        public void ResetActiveType()
        {
            _activeType = _origActiveType;

            _origActiveType = XOTableContextActiveType.None;
        }

        public XOFieldContext this[string FieldName]
        {
            get
            {
                return _fields.First(p => p.Name == FieldName);
            }
        }

        public bool IsDefaultContext
        {
            get { return this.Context.GetType() == typeof(XDefaultContext); }
        }

        public bool IsChildContext
        {
            get { return this.Context.GetType() == typeof(XChildContext); ; }
        }

        public bool IsFkSelectItemContext
        {
            get { return this.Context.GetType() == typeof(XFkSelectItemContext); }
        }

        public bool IsFkAddItemContext
        {
            get { return this.Context.GetType() == typeof(XFkAddItemContext); }
        }

        public bool IsFkItemContext
        {
            get { return this.Context is XFkSelectItemContext; }
        }

        public string SerializationName
        {
            get
            {
                if (this.IsFkItemContext)
                {
                    string relSzName = this.FkItemRelation.SerializationName;

                    if (!string.IsNullOrEmpty(relSzName))
                    {
                        return relSzName;
                    }

                    if (this.XOTable.XwpTable != null && this.XOTable.XwpTable.SeparateSerialization)
                    {
                        return string.Format("AUX_{0}", XOTable.SerializationName);
                    }
                }

                return XOTable.SerializationName;
            }
        }


        #endregion

        #region Just deleagtors to XOTable

        public string Name
        {
            get { return XOTable.Name; }
        }

        public string Caption
        {
            get { return XOTable.Caption; }
        }


        public string ItemCaption
        {
            get { return XOTable.ItemCaption; }
        }

        public bool IsPkAutoGenerated
        {
            get
            {
                return XOTable.IsPkAutoGenerated;
            }
        }

        public string PkFieldName
        {
            get { return XOTable.PkFieldName; }
        }

        public bool IsCanSaveInStorage
        {
            get
            {
                if (!this.IsChildContext)
                    return XOTable.IsCanSaveInStorage;
                else
                {
                    if (XOTable.XwpTable != null && XOTable.XwpTable.SaveMode != XWPTableSaveMode.Default)
                        return XOTable.IsCanSaveInStorage;

                    return ((XChildContext)Context).ParentFieldContext.TableContext.XOTable.IsCanSaveChildInStorage;
                }
            }
        }

        public bool IsCanSaveInCache
        {
            get
            {
                if (!this.IsChildContext)
                    return XOTable.IsCanSaveInCache;
                else
                {
                    if (XOTable.XwpTable != null && XOTable.XwpTable.SaveMode != XWPTableSaveMode.Default)
                        return XOTable.IsCanSaveInCache;

                    return ((XChildContext)Context).ParentFieldContext.TableContext.XOTable.IsCanSaveChildInCache;
                }
            }
        }

        public bool PersistFill
        {
            get { return XOTable.PersistFill; }
        }

        public bool IsCanMove
        {
            get { return XOTable.IsCanMove && !this.IsFkAddItemContext; }
        }

        public bool IsCanView
        {
            get { return XOTable.IsCanView; }
        }

        public bool IsCanEdit
        {
            get
            {
                return XOTable.IsCanEdit &&
                    EnumFlags.IsContain(FkSelectItemMode, XOMode.Edit) &&
                    IsParentCanEdit;
            }
        }

        public bool IsCanAdd
        {
            get
            {
                return XOTable.IsCanAdd &&
                    EnumFlags.IsContain(FkSelectItemMode, XOMode.Add) &&
                    IsParentCanEdit;
            }
        }

        public bool IsCanRemove
        {
            get
            {
                return XOTable.IsCanRemove &&
                    EnumFlags.IsContain(FkSelectItemMode, XOMode.Delete) &&
                    IsParentCanEdit;
            }
        }


        public bool IsCanClone
        {
            get { return IsCanAdd && !this.IsFkAddItemContext; }
        }

        public bool IsUseDefInsertCommand
        {
            get
            {
                return XOTable.IsUseDefInsertCommand;
            }
        }

        public bool IsUseDefUpdateCommand
        {
            get
            {
                return XOTable.IsUseDefUpdateCommand;
            }
        }

        public bool IsUseDefDeleteCommand
        {
            get
            {
                return XOTable.IsUseDefDeleteCommand;
            }
        }

        public string Source
        {
            get
            {
                return XOTable.Source;
            }
        }

        public string SourceUpdate
        {
            get
            {
                return XOTable.Source;
            }
        }

        public bool AutoFill
        {
            get { return XOTable.AutoFill; }
        }

        public XORelation FkItemRelation
        {
            get
            {
                return this.IsFkItemContext ? this.GetChildRelation(((XFkSelectItemContext)Context).childFieldContext.XOField) : null;
            }
        }

        public XORelation[] ShownChildrenRelations
        {
            get { return XOTable.ShownChildrenRelations; }
        }

        public XORelation GetChildRelation(XOField ChildField)
        {
            return XOTable.GetChildRelation(ChildField);
        }

        public XOFunction InsertFunction
        {
            get { return XOTable.InsertFunction; }
        }

        public XOFunction UpdateFunction
        {
            get { return XOTable.UpdateFunction; }
        }

        public XOFunction DeleteFunction
        {
            get { return XOTable.DeleteFunction; }
        }

        #endregion

        private XOMode FkSelectItemMode
        {
            get
            {
                if (this.IsFkSelectItemContext)
                {
                    return ((XFkSelectItemContext)Context).childFieldContext.XOField.FkSelectItemMode;
                }
                else
                {
                    return XOMode.All;
                }
            }
        }

        private bool IsParentCanEdit
        {
            get
            {
                if (this.IsChildContext)
                {
                    return ((XChildContext)Context).ParentFieldContext.TableContext.IsCanEdit;
                }
                else
                {
                    return true;
                }
            }
        }
    }

    public enum XOTableContextActiveType
    {
        None,

        Item,

        List
    }
}
